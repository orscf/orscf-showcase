<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ assembly name="Newtonsoft.Json" #>
<#@ assembly name="System.Core"#>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Newtonsoft.Json" #>
<#@ output extension=".Generated.cs"#><#
///////////////////////////////////////////////////////////////////////////////////////////////
//     copyright: Tobias Korn / version: 10.04.2021                                          //
///////////////////////////////////////////////////////////////////////////////////////////////

       const string inputFile = "..\\..\\SimpleVDR.BL\\ORSCF-VisitData.Schema.json";

       const string outputNamespace = "MedicalResearch.VisitData.RepositoryService";

       const string repositoryInterfaceNamespacePrefix = "MedicalResearch.VisitData.Repository.";
       const string repositoryStoreNamespacePrefix = "MedicalResearch.VisitData.Persistence.EF.";

       const string itemClassNamePattern = "{E}";
       const string entityClassNamePattern = "{E}Entity";

///////////////////////////////////////////////////////////////////////////////////////////////

string rawSchema = File.ReadAllText(Host.ResolvePath(inputFile), System.Text.Encoding.Default);
SchemaRoot schema = JsonConvert.DeserializeObject<SchemaRoot>(rawSchema);

#>
using MedicalResearch.VisitData.Persistence.EF;
using MedicalResearch.VisitData.Repository;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using Swashbuckle.AspNetCore.Annotations;
using Security;
using System;
using System.Collections.Generic;
using System.Data.AccessControl;
using System.Linq;
using System.Net;
<#

if(!String.IsNullOrWhiteSpace(outputNamespace)) {
#>

namespace <#=outputNamespace#> {
<#
}

foreach (EntitySchema entity in schema.Entities) {
  String ressolvedItemName = itemClassNamePattern.Replace("{E}", entity.Name);
  String ressolvedEntityName = entityClassNamePattern.Replace("{E}", entity.Name);
  String dbSetName = entity.NamePlural;

  Dictionary<String, List<String>> attributesPerField = new Dictionary<String, List<String>>();
  foreach (FieldSchema field in entity.Fields) {
    attributesPerField[field.Name] = new List<String>();
  }

  // PRIMARY-KEY
  String pkFieldType= "";
  String pkFieldTypeNullable = "";
  String pkCompositeTypeDeclaration= "";
  String pkParamName = "";
  String pkFieldSummary = "";
  String pkNameInSignaure = "";
  String paramBasedPkWhereExpression = "";
  String newEntityBasedPkWhereExpression = "";
  String callerPkSignature = "";
  String defaultOrderByExpression = "";
  //String swaggerResponseAttrForPk = "";
  //String swaggerResponseMimeTypeForPk = "application/json"; 
  IndexSchema pkIdx;

  foreach (IndexSchema idx in entity.Indices) {

    if(idx.Name == entity.PrimaryKeyIndexName){
      pkIdx = idx;
      if(idx.MemberFieldNames.Length > 1){

        pkFieldType = entity.Name + "Identity";
        pkNameInSignaure = pkFieldType;
        pkFieldSummary = "Composite Key, which represents the primary identity of a " + ressolvedItemName;
        pkCompositeTypeDeclaration = "\n\n/// <summary> " + pkFieldSummary + " </summary>\npublic class " + pkFieldType + " {\n";
        pkParamName = Ftl(pkFieldType);

        paramBasedPkWhereExpression = null;
        newEntityBasedPkWhereExpression = null;
        defaultOrderByExpression = null;
        callerPkSignature = "new " + pkFieldType + " { ";

        foreach (String mfn in idx.MemberFieldNames) {
          FieldSchema mf = entity.Fields.Where((f)=> f.Name.Equals(mfn)).Single();
          if(!String.IsNullOrWhiteSpace(mf.Summary)){
            pkCompositeTypeDeclaration = pkCompositeTypeDeclaration + "  /// <summary> " + mf.Summary + " </summary>\n";
          }
          pkCompositeTypeDeclaration = pkCompositeTypeDeclaration + "  " + mf.Type + " " + mf.Name + "\n";
          if(paramBasedPkWhereExpression == null){
            paramBasedPkWhereExpression = "(e)=> e." + mf.Name + " == " + pkParamName + "." + mf.Name;
            newEntityBasedPkWhereExpression = "(e)=> e." + mf.Name + " == newEntity." + mf.Name;
            defaultOrderByExpression = "OrderBy((e)=> e." + mf.Name + ")";
          }
          else{
            paramBasedPkWhereExpression = paramBasedPkWhereExpression + " && e." + mf.Name + " == " + pkParamName + "." + mf.Name;
            newEntityBasedPkWhereExpression = newEntityBasedPkWhereExpression + " && e." + mf.Name + " == newEntity." + mf.Name;
            callerPkSignature = callerPkSignature + ", ";
            defaultOrderByExpression = defaultOrderByExpression + ".ThenBy((e)=> e." + mf.Name + ")";
          }
          callerPkSignature = callerPkSignature + Ftl(ressolvedItemName) + "." + mf.Name;
        }
        callerPkSignature = callerPkSignature + " }";

        pkCompositeTypeDeclaration = pkCompositeTypeDeclaration + "}";
        //ref-types are always nullable
        pkFieldTypeNullable = pkFieldType;

      }
      else{

        //always, if not a capsle
        //swaggerResponseMimeTypeForPk = "text/plain"; 

        FieldSchema mf = entity.Fields.Where((f)=>f.Name.Equals(idx.MemberFieldNames[0])).Single();
        pkNameInSignaure = mf.Name;
        pkFieldSummary = mf.Summary;
        if(String.IsNullOrWhiteSpace(pkFieldSummary)){
          pkFieldSummary = "Represents the primary identity of a " + ressolvedItemName;
        }
        pkParamName = Ftl(mf.Name);
        pkFieldType = mf.Type;
        pkCompositeTypeDeclaration = "";

        if(pkFieldType.ToLower().Equals("string")){
          pkFieldTypeNullable = pkFieldType;
          //workarround:
          //swaggerResponseAttrForPk = "\n  [SwaggerResponse((int)HttpStatusCode.OK, Type=typeof(string))]";
          //swaggerResponseMimeTypeForPk = "text/plain"; 
        }
        else {
          pkFieldTypeNullable = pkFieldType + "?";
        }

        newEntityBasedPkWhereExpression = "(e)=>e." + mf.Name + " == newEntity." + mf.Name;
        paramBasedPkWhereExpression = "(e)=>e." + mf.Name + " == " + pkParamName;
        callerPkSignature = Ftl(ressolvedItemName) + "." + mf.Name;
        defaultOrderByExpression = "OrderBy((e)=> e." + mf.Name + ")";

      }
    }
  }

  /* ForeignKey-Attibute on this side works only for non-compisite-keys, because the column-order cant be specified
  foreach (RelationSchema rel in schema.Relations) {
    if(rel.ForeignEntityName == entity.Name){
      foreach (IndexSchema idx in entity.Indices) {
        if(idx.Name == rel.ForeignKeyIndexName){
          int i = 0;
          foreach (String foreignKeyFieldName in idx.MemberFieldNames) {
              attributesPerField[foreignKeyFieldName].Add("ForeignKey(nameof(" + rel.ForeignNavigationName + "))");
            i++;
          }
        }
      }
    }
  }
  */

  String entitySummary = entity.Summary;
  if(!String.IsNullOrWhiteSpace(entitySummary)){
    entitySummary = "/// <summary> " + entitySummary.Trim().Replace("\n", "\n/// ") + " </summary>\n";
  }
#>

<#=entitySummary#>[ApiController]
[Route("<#=Ftl(entity.NamePlural)#>")]
public partial class <#=entity.NamePlural#>Controller : ControllerBase {

  public const String SchemaVersion = "<#=schema.SemanticVersion #>";

  private readonly ILogger<<#=entity.NamePlural#>Controller> _logger;
  private readonly <#=repositoryInterfaceNamespacePrefix#>I<#=ressolvedItemName#>Repository _Repo;

  public <#=entity.NamePlural#>Controller(ILogger<<#=entity.NamePlural#>Controller> logger) {
    _logger = logger;
    _Repo = new <#=repositoryStoreNamespacePrefix#><#=ressolvedItemName#>Store();
  }

  /// <summary> Returns an info object, which specifies the possible operations (accessor specific permissions) when accessing <#=entity.NamePlural#>.</summary>
  [RequireValidApiKey()]
  [HttpGet("-"), Produces("application/json")]
  [SwaggerOperation(OperationId = nameof(Get<#=ressolvedItemName#>AccessSpecs), Description = nameof(Get<#=ressolvedItemName#>AccessSpecs))]
  public AccessSpecs Get<#=ressolvedItemName#>AccessSpecs(){
    try {
      return AccessControlContext.Current.GetAccessSpecs("<#=entity.Name#>");  
    }
    catch (Exception ex) {
      _logger.LogCritical(ex, ex.Message);
      return null;
    }
  }

  /// <summary> Loads a specific <#=ressolvedItemName#> addressed by the given primary identifier. Returns null on failure, or if no record exists with the given identity.</summary>
  /// <param name="<#=pkParamName#>"> <#=pkFieldSummary#> </param>
  [RequireValidApiKey("read-<#=entity.Name.ToLower()#>")]
  [HttpGet("{<#=pkParamName#>}"), Produces("application/json")]
  [SwaggerOperation(OperationId = nameof(Get<#=ressolvedItemName#>By<#=pkNameInSignaure#>), Description = nameof(Get<#=ressolvedItemName#>By<#=pkNameInSignaure#>))]
  public <#=ressolvedItemName#> Get<#=ressolvedItemName#>By<#=pkNameInSignaure#>(<#=pkFieldType#> <#=pkParamName#>){
    try {
      return _Repo.Get<#=ressolvedItemName#>By<#=pkNameInSignaure#>(<#=pkParamName#>);
    }
    catch (Exception ex) {
      _logger.LogCritical(ex, ex.Message);
      return null;
    }
  }

  /// <summary> Loads <#= entity.NamePlural#>. </summary>
  /// <param name="page">Number of the page, which should be returned </param>
  /// <param name="pageSize">Max count of <#= entity.NamePlural#> which should be returned </param>
  [RequireValidApiKey("read-<#=entity.Name.ToLower()#>")]
  [HttpGet(), Produces("application/json")]
  [SwaggerOperation(OperationId = nameof(Get<#= entity.NamePlural#>), Description = nameof(Get<#= entity.NamePlural#>))]
  public <#=ressolvedItemName#>[] Get<#= entity.NamePlural#>([FromQuery] int page = 1, [FromQuery] int pageSize = 20){
    try {
      return _Repo.Get<#= entity.NamePlural#>(page, pageSize); 
    }
    catch (Exception ex) {
      _logger.LogCritical(ex, ex.Message);
      return null;
    }
  }


  /// <summary> Loads <#= entity.NamePlural#> where values matching to ALL fields of the given 'filterValues' object.</summary>
  /// <param name="filterExpression">a filter expression like '((FieldName1 == "ABC" &amp;&amp; FieldName2 &gt; 12) || FieldName2 != "")'</param>
  /// <param name="sort">one or more property names which are used as sort order (before pagination)</param>
  /// <param name="page">Number of the page, which should be returned</param>
  /// <param name="pageSize">Max count of <#= entity.NamePlural#> which should be returned</param>
  [RequireValidApiKey("read-<#=entity.Name.ToLower()#>")]
  [HttpPost("search"), Produces("application/json")]
  [SwaggerOperation(OperationId = nameof(Search<#= entity.NamePlural#>), Description = nameof(Search<#= entity.NamePlural#>))]
  public <#=ressolvedItemName#>[] Search<#= entity.NamePlural#>([FromBody][SwaggerRequestBody(Required=true)] String filterExpression, [FromQuery] int page = 1, [FromQuery] int pageSize = 20, [FromQuery] String sort = null ){
    try {
      return _Repo.Search<#= entity.NamePlural#>(filterExpression, sort, page, pageSize);
    }
    catch (Exception ex) {
      _logger.LogCritical(ex, ex.Message);
      return null;
    }
  }

  /// <summary> Adds a new <#=ressolvedItemName#> and returns success. </summary>
  /// <param name="<#=Ftl(ressolvedItemName)#>"> <#=ressolvedItemName#> containing the new values </param>
  [RequireValidApiKey("add-<#=entity.Name.ToLower()#>")]
  [HttpPost(), Produces("application/json")]
  [SwaggerOperation(OperationId = nameof(AddNew<#=ressolvedItemName#>), Description = nameof(AddNew<#=ressolvedItemName#>))]
  public bool AddNew<#=ressolvedItemName#>([FromBody][SwaggerRequestBody(Required=true)] <#=ressolvedItemName#> <#=Ftl(ressolvedItemName)#>){
    try {
      return _Repo.AddNew<#=ressolvedItemName#>(<#=Ftl(ressolvedItemName)#>);  
    }
    catch (Exception ex) {
      _logger.LogCritical(ex, ex.Message);
      return false;
    }
  }

  /// <summary> Updates all values (which are not "FixedAfterCreation") of the given <#=ressolvedItemName#> addressed by the primary identifier fields within the given <#=ressolvedItemName#>. Returns false on failure or if no target record was found, otherwise true.</summary>
  /// <param name="<#=Ftl(ressolvedItemName)#>"> <#=ressolvedItemName#> containing the new values (the primary identifier fields within the given <#=ressolvedItemName#> will be used to address the target record) </param>
  [RequireValidApiKey("update-<#=entity.Name.ToLower()#>")]
  [HttpPut(), Produces("application/json")]
  [SwaggerOperation(OperationId = nameof(Update<#=ressolvedItemName#>), Description = nameof(Update<#=ressolvedItemName#>))]
  public bool Update<#=ressolvedItemName#>([FromBody][SwaggerRequestBody(Required=true)] <#=ressolvedItemName#> <#=Ftl(ressolvedItemName)#>){
    try {
      return _Repo.Update<#=ressolvedItemName#>(<#=Ftl(ressolvedItemName)#>);   
    }
    catch (Exception ex) {
      _logger.LogCritical(ex, ex.Message);
      return false;
    }
  }

  /// <summary> Updates all values (which are not "FixedAfterCreation") of the given <#=ressolvedItemName#> addressed by the supplementary given primary identifier. Returns false on failure or if no target record was found, otherwise true.</summary>
  /// <param name="<#=pkParamName#>"> <#=pkFieldSummary#> </param>
  /// <param name="<#=Ftl(ressolvedItemName)#>"> <#=ressolvedItemName#> containing the new values (the primary identifier fields within the given <#=ressolvedItemName#> will be ignored) </param>
  [RequireValidApiKey("update-<#=entity.Name.ToLower()#>")]
  [HttpPut("{<#=pkParamName#>}"), Produces("application/json")]
  [SwaggerOperation(OperationId = nameof(Update<#=ressolvedItemName#>By<#=pkNameInSignaure#>), Description = nameof(Update<#=ressolvedItemName#>By<#=pkNameInSignaure#>))]
  public bool Update<#=ressolvedItemName#>By<#=pkNameInSignaure#>(<#=pkFieldType#> <#=pkParamName#>, [FromBody][SwaggerRequestBody(Required=true)] <#=ressolvedItemName#> <#=Ftl(ressolvedItemName)#>){
    try {
      return _Repo.Update<#=ressolvedItemName#>By<#=pkNameInSignaure#>(<#=pkParamName#>, <#=Ftl(ressolvedItemName)#>);   
    }
    catch (Exception ex) {
      _logger.LogCritical(ex, ex.Message);
      return false;
    }
  }

  /// <summary> Deletes a specific <#=ressolvedItemName#> addressed by the given primary identifier. Returns false on failure or if no target record was found, otherwise true.</summary>
  /// <param name="<#=pkParamName#>"> <#=pkFieldSummary#> </param>
  [RequireValidApiKey("delete-<#=entity.Name.ToLower()#>")]
  [HttpDelete("{<#=pkParamName#>}"), Produces("application/json")]
  [SwaggerOperation(OperationId = nameof(Delete<#=ressolvedItemName#>By<#=pkNameInSignaure#>), Description = nameof(Delete<#=ressolvedItemName#>By<#=pkNameInSignaure#>))]
  public bool Delete<#=ressolvedItemName#>By<#=pkNameInSignaure#>(<#=pkFieldType#> <#=pkParamName#>){
    try {
      return _Repo.Delete<#=ressolvedItemName#>By<#=pkNameInSignaure#>(<#=pkParamName#>);
    }
    catch (Exception ex) {
      _logger.LogCritical(ex, ex.Message);
      return false;
    }
  }

}
<#

}// entity-loop

if(!String.IsNullOrWhiteSpace(outputNamespace)) {
#>

}
<#
}

#><#+

///////////////////////////////////////////////////////////////////////////////////////////////
//     GENERATOR-CODE                                                                        //
///////////////////////////////////////////////////////////////////////////////////////////////

string Ftl(string input){  
  if(Char.IsUpper(input[0])){
    return Char.ToLower(input[0]).ToString() + input.Substring(1, input.Length - 1);
  }
  return input;
}

class SchemaRoot{

  public string DescriptionFormat = "";

  public string TimestampUtc = "";
  public string SemanticVersion = "";

  public EntitySchema[] Entities = {};

  public RelationSchema[] Relations = {};

}

class EntitySchema{

  public string Name = "";
  public string NamePlural = "";
  public string InheritedEntityName = null;
  public string Summary = "";

  public bool IsBlEntrypoint = false;

  public string PrimaryKeyIndexName = "";
  public IndexSchema[] Indices = {};

  public FieldSchema[] Fields = {};

}

class FieldSchema{

  public string Name = "";
  public string Type = "";
  public int MaxLength = 0;

  public string Summary = "";
  public bool SystemInternal = false;
  public bool FixedAfterCreation = false;

  public bool Required = true;
  public string DefaultValue = null;
  public bool DbGeneratedIdentity = false;

}

class IndexSchema{

  public string Name = "";
  public bool Unique = false;
  public string[] MemberFieldNames = {};

}

class RelationSchema{

  public string Name = "";

  public string PrimaryEntityName = "";
  public string ForeignEntityName = "";
  public string ForeignKeyIndexName = "";

  public bool IsLookupRelation = true;
  public bool PrimaryEntityIsOptional = false;
  public bool ForeignEntityIsMultiple = true;

  public string PrimaryNavigationName = "";
  public string ForeignNavigationName = "";
  public string PrimaryNavigationSummary = "";
  public string ForeignNavigationSummary = "";

  public bool CascadeDelete = false;

}

#>
