// <auto-generated />
using System;
using MedicalResearch.Workflow.Persistence.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MedicalResearch.Workflow.Migrations
{
    [DbContext(typeof(WorkflowDefinitionDbContext))]
    [Migration("20210312152513_V001")]
    partial class V001
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("MedicalResearch.Workflow.Arm", b =>
                {
                    b.Property<string>("StudyArmName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StudyWorkflowName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("StudyWorkflowVersion")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ArmSpecificDocumentationUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("BillablePriceOnAbortedParticipation")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("BillablePriceOnCompletedParticipation")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("BillablePriceOnFailedInclusion")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("BillablePriceOnSuccessfullInclusion")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("InclusionCriteria")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RootProcedureScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Substudy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StudyArmName", "StudyWorkflowName", "StudyWorkflowVersion");

                    b.HasIndex("RootProcedureScheduleId");

                    b.HasIndex("StudyWorkflowName", "StudyWorkflowVersion");

                    b.ToTable("WdrArms");
                });

            modelBuilder.Entity("MedicalResearch.Workflow.DataRecordingTask", b =>
                {
                    b.Property<string>("DataRecordingName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("BillablePriceOnCompletedExecution")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("DataSchemaUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DefaultData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImportantNotices")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudyWorkflowName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("StudyWorkflowVersion")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("TaskSpecificDocumentationUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DataRecordingName");

                    b.HasIndex("StudyWorkflowName", "StudyWorkflowVersion");

                    b.ToTable("WdrDataRecordingTasks");
                });

            modelBuilder.Entity("MedicalResearch.Workflow.DrugApplymentTask", b =>
                {
                    b.Property<string>("DrugApplymentName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ApplymentRoute")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("BillablePriceOnCompletedExecution")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DrugDoseMgPerUnitMg")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("DrugName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImportantNotices")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudyWorkflowName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("StudyWorkflowVersion")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("TaskSpecificDocumentationUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("UnitsToApply")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("DrugApplymentName");

                    b.HasIndex("StudyWorkflowName", "StudyWorkflowVersion");

                    b.ToTable("WdrDrugAppliymentTasks");
                });

            modelBuilder.Entity("MedicalResearch.Workflow.InducedDataRecordingTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EventOnLost")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventOnSkip")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InducedDataRecordingName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("InducedTaskExecutionTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Offset")
                        .HasColumnType("int");

                    b.Property<string>("OffsetUnit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SchedulingVariabilityAfter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SchedulingVariabilityBefore")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SchedulingVariabilityUnit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Skipable")
                        .HasColumnType("bit");

                    b.Property<Guid>("TaskScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("InducedDataRecordingName");

                    b.HasIndex("TaskScheduleId");

                    b.ToTable("WdrInducedDataRecordingTasks");
                });

            modelBuilder.Entity("MedicalResearch.Workflow.InducedDrugApplymentTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EventOnLost")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventOnSkip")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InducedDrugApplymentName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("InducedTaskExecutionTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Offset")
                        .HasColumnType("int");

                    b.Property<string>("OffsetUnit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SchedulingVariabilityAfter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SchedulingVariabilityBefore")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SchedulingVariabilityUnit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Skipable")
                        .HasColumnType("bit");

                    b.Property<Guid>("TaskScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("InducedDrugApplymentName");

                    b.HasIndex("TaskScheduleId");

                    b.ToTable("WdrInducedDrugApplymentTasks");
                });

            modelBuilder.Entity("MedicalResearch.Workflow.InducedSubProcedureSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InducedProcedureScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Offset")
                        .HasColumnType("int");

                    b.Property<string>("OffsetUnit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ParentProcedureScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SchedulingVariabilityAfter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SchedulingVariabilityBefore")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SchedulingVariabilityUnit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SharedLostCounters")
                        .HasColumnType("bit");

                    b.Property<bool>("SharedSkipCounters")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("InducedProcedureScheduleId");

                    b.HasIndex("ParentProcedureScheduleId");

                    b.ToTable("WdrInducedSubProcedureSchedules");
                });

            modelBuilder.Entity("MedicalResearch.Workflow.InducedSubTaskSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InducedTaskScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Offset")
                        .HasColumnType("int");

                    b.Property<string>("OffsetUnit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ParentTaskScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SchedulingVariabilityAfter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SchedulingVariabilityBefore")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SchedulingVariabilityUnit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SharedLostCounters")
                        .HasColumnType("bit");

                    b.Property<bool>("SharedSkipCounters")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("InducedTaskScheduleId");

                    b.HasIndex("ParentTaskScheduleId");

                    b.ToTable("WdrInducedSubTaskSchedules");
                });

            modelBuilder.Entity("MedicalResearch.Workflow.InducedTreatmentTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EventOnLost")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventOnSkip")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InducedTaskExecutionTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InducedTreatmentName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Offset")
                        .HasColumnType("int");

                    b.Property<string>("OffsetUnit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SchedulingVariabilityAfter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SchedulingVariabilityBefore")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SchedulingVariabilityUnit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Skipable")
                        .HasColumnType("bit");

                    b.Property<Guid>("TaskScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("InducedTreatmentName");

                    b.HasIndex("TaskScheduleId");

                    b.ToTable("WdrInducedTreatmentTasks");
                });

            modelBuilder.Entity("MedicalResearch.Workflow.InducedVisitProcedure", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EventOnLost")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventOnSkip")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InducedVisitExecutionTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InducedVisitProdecureName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Offset")
                        .HasColumnType("int");

                    b.Property<string>("OffsetUnit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProcedureScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SchedulingVariabilityAfter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SchedulingVariabilityBefore")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SchedulingVariabilityUnit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Skipable")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("InducedVisitProdecureName");

                    b.HasIndex("ProcedureScheduleId");

                    b.ToTable("WdrInducedVisitProcedures");
                });

            modelBuilder.Entity("MedicalResearch.Workflow.ProcedureCycleDefinition", b =>
                {
                    b.Property<Guid>("ProcedureScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("CycleLimit")
                        .HasColumnType("int");

                    b.Property<int>("ReschedulingBase")
                        .HasColumnType("int");

                    b.Property<string>("ReschedulingOffset")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReschedulingOffsetUnit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SharedLostCounters")
                        .HasColumnType("bit");

                    b.Property<bool>("SharedSkipCounters")
                        .HasColumnType("bit");

                    b.HasKey("ProcedureScheduleId");

                    b.ToTable("WdrProcedureCycleDefinitions");
                });

            modelBuilder.Entity("MedicalResearch.Workflow.ProcedureSchedule", b =>
                {
                    b.Property<Guid>("ProcedureScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AbortCausingEvents")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventOnAllCyclesEnded")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventOnCycleEnded")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventOnLtfuAbort")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InducingEvents")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaxLostsBeforeLtfuAbort")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaxSkipsBeforeLost")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaxSubsequentLostsBeforeLtfuAbort")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaxSubsequentSkipsBeforeLost")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudyWorkflowName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("StudyWorkflowVersion")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProcedureScheduleId");

                    b.HasIndex("StudyWorkflowName", "StudyWorkflowVersion");

                    b.ToTable("WdrProcedureSchedules");
                });

            modelBuilder.Entity("MedicalResearch.Workflow.ResearchStudy", b =>
                {
                    b.Property<string>("StudyWorkflowName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("StudyWorkflowVersion")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal?>("BillablePriceForGeneralPreparation")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("BillingCurrency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CaseReportFormUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DefinitionOwner")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentationUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DraftState")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastChangeUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("LogoImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OfficialLabel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudyDocumentationUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VersionIdentity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StudyWorkflowName", "StudyWorkflowVersion");

                    b.ToTable("WdrResearchStudies");
                });

            modelBuilder.Entity("MedicalResearch.Workflow.StudyEvent", b =>
                {
                    b.Property<string>("StudyEventName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("AllowManualTrigger")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EvenSpecificDocumentationUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MaxOccourrencesBeforeExclusion")
                        .HasColumnType("int");

                    b.Property<string>("StudyWorkflowName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("StudyWorkflowVersion")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("StudyEventName");

                    b.HasIndex("StudyWorkflowName", "StudyWorkflowVersion");

                    b.ToTable("WdrStudyEvents");
                });

            modelBuilder.Entity("MedicalResearch.Workflow.TaskCycleDefinition", b =>
                {
                    b.Property<Guid>("TaskScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("CycleLimit")
                        .HasColumnType("int");

                    b.Property<string>("ReschedulingBase")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReschedulingOffset")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReschedulingOffsetUnit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SharedLostCounters")
                        .HasColumnType("bit");

                    b.Property<bool>("SharedSkipCounters")
                        .HasColumnType("bit");

                    b.HasKey("TaskScheduleId");

                    b.ToTable("WdrTaskCycleDefinitions");
                });

            modelBuilder.Entity("MedicalResearch.Workflow.TaskSchedule", b =>
                {
                    b.Property<Guid>("TaskScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AbortCausingEvents")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventOnAllCyclesEnded")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventOnCycleEnded")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventOnLtfuAbort")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InducingEvents")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaxLostsBeforeLtfuAbort")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaxSkipsBeforeLost")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaxSubsequentLostsBeforeLtfuAbort")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaxSubsequentSkipsBeforeLost")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudyWorkflowName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("StudyWorkflowVersion")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TaskScheduleId");

                    b.HasIndex("StudyWorkflowName", "StudyWorkflowVersion");

                    b.ToTable("WdrTaskSchedules");
                });

            modelBuilder.Entity("MedicalResearch.Workflow.TreatmentTask", b =>
                {
                    b.Property<string>("TreatmentName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("BillablePriceOnCompletedExecution")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ImportantNotices")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudyWorkflowName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("StudyWorkflowVersion")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("TaskSpecificDocumentationUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TreatmentDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TreatmentName");

                    b.HasIndex("StudyWorkflowName", "StudyWorkflowVersion");

                    b.ToTable("WdrTreatmentTasks");
                });

            modelBuilder.Entity("MedicalResearch.Workflow.VisitProdecureDefinition", b =>
                {
                    b.Property<string>("VisitProdecureName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("BillablePriceOnAbortedExecution")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("BillablePriceOnCompletedExecution")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("RootTaskScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StudyWorkflowName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("StudyWorkflowVersion")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("VisitSpecificDocumentationUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VisitProdecureName");

                    b.HasIndex("RootTaskScheduleId");

                    b.HasIndex("StudyWorkflowName", "StudyWorkflowVersion");

                    b.ToTable("WdrVisitProdecureDefinitions");
                });

            modelBuilder.Entity("MedicalResearch.Workflow.Arm", b =>
                {
                    b.HasOne("MedicalResearch.Workflow.ProcedureSchedule", "RootProcedureSchedule")
                        .WithMany("EntryArms")
                        .HasForeignKey("RootProcedureScheduleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MedicalResearch.Workflow.ResearchStudy", "ResearchStudy")
                        .WithMany("Arms")
                        .HasForeignKey("StudyWorkflowName", "StudyWorkflowVersion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ResearchStudy");

                    b.Navigation("RootProcedureSchedule");
                });

            modelBuilder.Entity("MedicalResearch.Workflow.DataRecordingTask", b =>
                {
                    b.HasOne("MedicalResearch.Workflow.ResearchStudy", "ResearchStudy")
                        .WithMany("DataRecordingTasks")
                        .HasForeignKey("StudyWorkflowName", "StudyWorkflowVersion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ResearchStudy");
                });

            modelBuilder.Entity("MedicalResearch.Workflow.DrugApplymentTask", b =>
                {
                    b.HasOne("MedicalResearch.Workflow.ResearchStudy", "ResearchStudy")
                        .WithMany("DrugApplymentTasks")
                        .HasForeignKey("StudyWorkflowName", "StudyWorkflowVersion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ResearchStudy");
                });

            modelBuilder.Entity("MedicalResearch.Workflow.InducedDataRecordingTask", b =>
                {
                    b.HasOne("MedicalResearch.Workflow.DataRecordingTask", "InducedTask")
                        .WithMany("Inducements")
                        .HasForeignKey("InducedDataRecordingName")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MedicalResearch.Workflow.TaskSchedule", "TaskSchedule")
                        .WithMany("InducedDataRecordingTasks")
                        .HasForeignKey("TaskScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InducedTask");

                    b.Navigation("TaskSchedule");
                });

            modelBuilder.Entity("MedicalResearch.Workflow.InducedDrugApplymentTask", b =>
                {
                    b.HasOne("MedicalResearch.Workflow.DrugApplymentTask", "InducedTask")
                        .WithMany("Inducements")
                        .HasForeignKey("InducedDrugApplymentName")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MedicalResearch.Workflow.TaskSchedule", "TaskSchedule")
                        .WithMany("InducedDrugApplymentTasks")
                        .HasForeignKey("TaskScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InducedTask");

                    b.Navigation("TaskSchedule");
                });

            modelBuilder.Entity("MedicalResearch.Workflow.InducedSubProcedureSchedule", b =>
                {
                    b.HasOne("MedicalResearch.Workflow.ProcedureSchedule", "InducedProcedureSchedule")
                        .WithMany("InducingSubProcedureSchedules")
                        .HasForeignKey("InducedProcedureScheduleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MedicalResearch.Workflow.ProcedureSchedule", "ParentProcedureSchedule")
                        .WithMany("InducedSubProcedureSchedules")
                        .HasForeignKey("ParentProcedureScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InducedProcedureSchedule");

                    b.Navigation("ParentProcedureSchedule");
                });

            modelBuilder.Entity("MedicalResearch.Workflow.InducedSubTaskSchedule", b =>
                {
                    b.HasOne("MedicalResearch.Workflow.TaskSchedule", "InducedTaskSchedule")
                        .WithMany("InducingTaskSchedules")
                        .HasForeignKey("InducedTaskScheduleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MedicalResearch.Workflow.TaskSchedule", "ParentTaskSchedule")
                        .WithMany("InducedSubTaskSchedules")
                        .HasForeignKey("ParentTaskScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InducedTaskSchedule");

                    b.Navigation("ParentTaskSchedule");
                });

            modelBuilder.Entity("MedicalResearch.Workflow.InducedTreatmentTask", b =>
                {
                    b.HasOne("MedicalResearch.Workflow.TreatmentTask", "InducedTask")
                        .WithMany("Inducements")
                        .HasForeignKey("InducedTreatmentName")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MedicalResearch.Workflow.TaskSchedule", "TaskSchedule")
                        .WithMany("InducedTreatmentTasks")
                        .HasForeignKey("TaskScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InducedTask");

                    b.Navigation("TaskSchedule");
                });

            modelBuilder.Entity("MedicalResearch.Workflow.InducedVisitProcedure", b =>
                {
                    b.HasOne("MedicalResearch.Workflow.VisitProdecureDefinition", "InducedVisitProdecure")
                        .WithMany("Inducements")
                        .HasForeignKey("InducedVisitProdecureName")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MedicalResearch.Workflow.ProcedureSchedule", "ProcedureSchedule")
                        .WithMany("InducedProcedures")
                        .HasForeignKey("ProcedureScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InducedVisitProdecure");

                    b.Navigation("ProcedureSchedule");
                });

            modelBuilder.Entity("MedicalResearch.Workflow.ProcedureCycleDefinition", b =>
                {
                    b.HasOne("MedicalResearch.Workflow.ProcedureSchedule", "ProcedureSchedule")
                        .WithOne("CycleDefinition")
                        .HasForeignKey("MedicalResearch.Workflow.ProcedureCycleDefinition", "ProcedureScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProcedureSchedule");
                });

            modelBuilder.Entity("MedicalResearch.Workflow.ProcedureSchedule", b =>
                {
                    b.HasOne("MedicalResearch.Workflow.ResearchStudy", "ResearchStudy")
                        .WithMany("ProcedureSchedules")
                        .HasForeignKey("StudyWorkflowName", "StudyWorkflowVersion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ResearchStudy");
                });

            modelBuilder.Entity("MedicalResearch.Workflow.StudyEvent", b =>
                {
                    b.HasOne("MedicalResearch.Workflow.ResearchStudy", "ResearchStudy")
                        .WithMany("Events")
                        .HasForeignKey("StudyWorkflowName", "StudyWorkflowVersion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ResearchStudy");
                });

            modelBuilder.Entity("MedicalResearch.Workflow.TaskCycleDefinition", b =>
                {
                    b.HasOne("MedicalResearch.Workflow.TaskSchedule", "TaskSchedule")
                        .WithOne("CycleDefinition")
                        .HasForeignKey("MedicalResearch.Workflow.TaskCycleDefinition", "TaskScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TaskSchedule");
                });

            modelBuilder.Entity("MedicalResearch.Workflow.TaskSchedule", b =>
                {
                    b.HasOne("MedicalResearch.Workflow.ResearchStudy", "ResearchStudy")
                        .WithMany("TaskSchedules")
                        .HasForeignKey("StudyWorkflowName", "StudyWorkflowVersion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ResearchStudy");
                });

            modelBuilder.Entity("MedicalResearch.Workflow.TreatmentTask", b =>
                {
                    b.HasOne("MedicalResearch.Workflow.ResearchStudy", "ResearchStudy")
                        .WithMany("TreatmentTasks")
                        .HasForeignKey("StudyWorkflowName", "StudyWorkflowVersion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ResearchStudy");
                });

            modelBuilder.Entity("MedicalResearch.Workflow.VisitProdecureDefinition", b =>
                {
                    b.HasOne("MedicalResearch.Workflow.TaskSchedule", "RootTaskSchedule")
                        .WithMany("EntryVisitProdecureDefinitions")
                        .HasForeignKey("RootTaskScheduleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MedicalResearch.Workflow.ResearchStudy", "ResearchStudy")
                        .WithMany("VisitProdecureDefinitions")
                        .HasForeignKey("StudyWorkflowName", "StudyWorkflowVersion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ResearchStudy");

                    b.Navigation("RootTaskSchedule");
                });

            modelBuilder.Entity("MedicalResearch.Workflow.DataRecordingTask", b =>
                {
                    b.Navigation("Inducements");
                });

            modelBuilder.Entity("MedicalResearch.Workflow.DrugApplymentTask", b =>
                {
                    b.Navigation("Inducements");
                });

            modelBuilder.Entity("MedicalResearch.Workflow.ProcedureSchedule", b =>
                {
                    b.Navigation("CycleDefinition");

                    b.Navigation("EntryArms");

                    b.Navigation("InducedProcedures");

                    b.Navigation("InducedSubProcedureSchedules");

                    b.Navigation("InducingSubProcedureSchedules");
                });

            modelBuilder.Entity("MedicalResearch.Workflow.ResearchStudy", b =>
                {
                    b.Navigation("Arms");

                    b.Navigation("DataRecordingTasks");

                    b.Navigation("DrugApplymentTasks");

                    b.Navigation("Events");

                    b.Navigation("ProcedureSchedules");

                    b.Navigation("TaskSchedules");

                    b.Navigation("TreatmentTasks");

                    b.Navigation("VisitProdecureDefinitions");
                });

            modelBuilder.Entity("MedicalResearch.Workflow.TaskSchedule", b =>
                {
                    b.Navigation("CycleDefinition");

                    b.Navigation("EntryVisitProdecureDefinitions");

                    b.Navigation("InducedDataRecordingTasks");

                    b.Navigation("InducedDrugApplymentTasks");

                    b.Navigation("InducedSubTaskSchedules");

                    b.Navigation("InducedTreatmentTasks");

                    b.Navigation("InducingTaskSchedules");
                });

            modelBuilder.Entity("MedicalResearch.Workflow.TreatmentTask", b =>
                {
                    b.Navigation("Inducements");
                });

            modelBuilder.Entity("MedicalResearch.Workflow.VisitProdecureDefinition", b =>
                {
                    b.Navigation("Inducements");
                });
#pragma warning restore 612, 618
        }
    }
}
